// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package cards generated by go-bindata.// sources:
// cards.json
package cards

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cardsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd2\x31\x6b\xf3\x30\x10\x06\xe0\x3d\x90\xff\x20\x34\x47\x70\xa7\x93\x74\xb2\xb7\x7c\x1f\xd9\xd2\x52\x42\xb7\xd2\xc1\x6d\x85\x6b\x4a\x6c\xb0\x13\x08\x94\xfe\xf7\x92\x06\x82\x03\xe7\x62\x41\xb5\x18\x74\x1e\x1e\xdd\xfb\x3e\x2d\x17\x4a\x29\xf5\x79\xf9\x9c\x8f\xbe\xaf\xf6\x49\x97\x7a\xdd\xf4\x2f\xc7\x41\xad\xc9\x82\xb1\x0e\xf5\x6a\xfc\xcb\x71\xbf\x69\xeb\xa6\x4d\x83\x2e\xed\x78\x70\x57\x9d\x1e\xaa\x93\x2e\xd1\xc3\xf8\x7a\x57\xb5\x75\xd2\x25\x11\xdc\x5c\xff\xef\x86\x83\x2e\x11\x10\x7e\xce\x65\xf2\xb5\x9a\x24\xfd\xeb\x52\xd3\xd6\x8a\x1d\x9b\xd8\x4c\x82\x9c\x04\x72\x81\x05\x10\x33\x09\x20\x87\xd1\xcd\x03\x6d\xbb\xd7\x8f\xf7\x94\xde\xd4\xd6\x20\x20\x1a\x54\x8f\x7d\x33\x1c\xaa\x7e\x12\x47\x12\xce\xfa\x20\xe0\x6c\x88\xd2\xb6\xc8\x61\x98\x85\xbb\x06\xe8\xc0\x78\x80\xbc\x7d\x11\x4a\x01\x16\x20\x05\x68\x0b\xf6\x79\x01\x12\x9b\xf8\x8b\x48\xae\x54\x90\x44\xb6\x20\x2f\x55\x2a\x60\x9e\x28\xb2\x89\x79\x1e\xeb\xac\xd4\x28\xf2\x92\xc7\xf9\x99\x15\xbf\x86\xe6\xc1\x9c\x9f\xf0\x17\xa6\xc8\x52\x6a\x14\x42\x66\x6a\xcc\x86\x00\x36\xbb\x3c\x13\x05\x2f\xee\x89\x25\x13\xfb\x1b\xd3\x72\xf1\xfc\x1d\x00\x00\xff\xff\x9d\x7d\xac\x2c\xa1\x04\x00\x00")

func cardsJsonBytes() ([]byte, error) {
	return bindataRead(
		_cardsJson,
		"cards.json",
	)
}

func cardsJson() (*asset, error) {
	bytes, err := cardsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cards.json", size: 1185, mode: os.FileMode(438), modTime: time.Unix(1605029785, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cards.json": cardsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cards.json": &bintree{cardsJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
